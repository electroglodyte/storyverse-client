import React, { useState } from 'react';\nimport { supabase } from '../supabaseClient';\nimport './JSONImport.css';\n\nconst JSONImport: React.FC = () => {\n  const [jsonInput, setJsonInput] = useState<string>('');\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [logs, setLogs] = useState<string[]>([]);\n\n  // Helper function to add a log message\n  const addLog = (message: string) => {\n    setLogs(prevLogs => [...prevLogs, `${new Date().toISOString().split('T')[1].split('.')[0]} - ${message}`]);\n  };\n\n  // Process the JSON input\n  const handleProcessJSON = async () => {\n    if (!jsonInput.trim()) {\n      setError('Please enter JSON data to process');\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n    setSuccess(null);\n    setLogs([]);\n\n    try {\n      // Parse the JSON input\n      let parsedData;\n      try {\n        parsedData = JSON.parse(jsonInput);\n        addLog('Successfully parsed JSON input');\n      } catch (parseError) {\n        throw new Error(`Invalid JSON format: ${(parseError as Error).message}`);\n      }\n\n      // Process the data using import_analyzed_story tool\n      addLog('Invoking import_analyzed_story tool...');\n      const { data, error: importError } = await supabase.functions.invoke('import-analyzed-story', {\n        body: { data: parsedData }\n      });\n\n      if (importError) {\n        throw new Error(`Error importing data: ${importError.message}`);\n      }\n\n      // Log the results\n      if (data) {\n        if (data.success) {\n          setSuccess('Story data imported successfully!');\n          addLog(`Successfully imported story: ${data.story?.title || 'Unnamed'}`);\n          \n          // Log details of what was imported\n          if (data.stats) {\n            Object.entries(data.stats).forEach(([key, value]) => {\n              addLog(`Imported ${value} ${key}`);\n            });\n          }\n        } else {\n          throw new Error(data.message || 'Unknown error occurred during import');\n        }\n      } else {\n        throw new Error('No response data received from import function');\n      }\n    } catch (err) {\n      const errorMessage = (err as Error).message || 'An unknown error occurred';\n      setError(errorMessage);\n      addLog(`Error: ${errorMessage}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"json-import-container\">\n      <h1>JSON Import</h1>\n      <p className=\"description\">\n        Paste JSON data exported from Claude's story analysis to import characters, locations, events, and other story elements directly into the database.\n      </p>\n\n      <div className=\"json-input-container\">\n        <textarea\n          className=\"json-input\"\n          value={jsonInput}\n          onChange={(e) => setJsonInput(e.target.value)}\n          placeholder=\"Paste your JSON data here...\"\n          disabled={isProcessing}\n        />\n      </div>\n\n      <div className=\"action-buttons\">\n        <button\n          className=\"primary-button\"\n          onClick={handleProcessJSON}\n          disabled={isProcessing || !jsonInput.trim()}\n        >\n          {isProcessing ? 'Processing...' : 'Process JSON'}\n        </button>\n        <button\n          className=\"secondary-button\"\n          onClick={() => setJsonInput('')}\n          disabled={isProcessing || !jsonInput.trim()}\n        >\n          Clear\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n\n      {success && (\n        <div className=\"success-message\">\n          {success}\n        </div>\n      )}\n\n      {logs.length > 0 && (\n        <div className=\"logs-container\">\n          <h3>Import Log</h3>\n          <div className=\"logs\">\n            {logs.map((log, index) => (\n              <div key={index} className=\"log-entry\">{log}</div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default JSONImport;